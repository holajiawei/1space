services:
    - docker

script:
    - ./run_tests

cache:
    directories:
        - $HOME/docker
    timeout: 300

before_cache:
    - >
        if [[ $TRAVIS_TEST_RESULT = 0 ]]; then
            mkdir -p $HOME/docker
            # Export and save the images we care about
            IMAGES=`docker images --format '{{.Repository}}:{{.Tag}}:{{.ID}}'`
            OLD_IMAGES=`ls $HOME/docker/|grep tar.gz`
            for img in $IMAGES; do
                img_name=`echo $img|cut -d : -f 1,2 -`
                if [[ "$img_name" = "1space-keystone:latest" ]] || [[ "$img_name" = "swift-s3-sync:latest" ]] ||\
                   [[ "$img_name" = "cloud-connector:latest" ]] || [[ "$img_name" = "cloud-connector-wheel:latest" ]]; then
                    if [[ ! -e $HOME/docker/$img.tar.gz ]]; then
                        NEW_IMAGE="true"
                        echo "Saving $img"
                        docker save $img_name | gzip -2 > $HOME/docker/$img.tar.gz
                    fi
                fi
            done
            for img in $OLD_IMAGES; do
                img_name=`echo $img|cut -d : -f 1,2 -`
                if [[ $img != `docker images --format {{.Repository}}:{{.Tag}}:{{.ID}}.tar.gz --filter=reference=$img_name` ]]; then
                    echo "Removing: $img"
                    rm -f $HOME/docker/$img
                fi
            done
            if [[ "$NEW_IMAGE" = "true" ]] || [[ ! -e $HOME/docker/metadata.tar ]]; then
                # Export the metadata, so we don't pull the same image again
                sudo tar -cvf $HOME/docker/metadata.tar /var/lib/docker/image/overlay2/distribution/diffid-by-digest
            fi
        fi

before_install:
    - >
        if [[ -d $HOME/docker ]]; then
            ls $HOME/docker
            ls $HOME/docker/|grep tar.gz | xargs -I {file} sh -c 'zcat $HOME/docker/{file} | docker load'
            if [[ -e $HOME/docker/metadata.tar ]]; then
                sudo tar -C / -xvf $HOME/docker/metadata.tar
            fi
            docker images --format '{{.ID}}' |xargs -I {img} docker inspect {img}
        fi

after_success:
    - docker exec -e TRAVIS=1 -e TRAVIS_JOB_ID=${TRAVIS_JOB_ID} -e TRAVIS_BRANCH=${TRAVIS_BRANCH} -e TRAVIS_PULL_REQUEST=${TRAVIS_PULL_REQUEST} swift-s3-sync bash -c "cd /swift-s3-sync; coveralls"
